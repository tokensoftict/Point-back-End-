<?php



namespace Modules\Settings\Entities;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Schema\Blueprint;
use Modules\Auth\Entities\User;
use Modules\BakeryManager\Entities\Bakeryproduction;
use Modules\BakeryManager\Entities\BakeryProductionMaterialItem;
use Modules\BakeryManager\Entities\BakeryProductionProductsItem;
use Modules\InvoiceManager\Entities\Invoice;
use Modules\InvoiceManager\Entities\InvoiceItem;
use Modules\InvoiceManager\Entities\InvoiceItemBatch;
use Modules\PaymentManager\Entities\CreditPaymentLog;
use Modules\PaymentManager\Entities\Payment;
use Modules\PurchaseOrders\Entities\PurchaseOrder;
use Modules\PurchaseOrders\Entities\PurchaseOrderItem;
use Schema;

/**
 * Class Branch
 *
 * @property int $id
 * @property string $name
 * @property string $quantity_column
 * @property string|null $address_1
 * @property string|null $address_2
 * @property string|null $phone
 * @property Carbon|null $created_at
 * @property Carbon|null $updated_at
 *
 * @property Collection|BakeryProductionMaterialItem[] $bakery_production_material_items
 * @property Collection|BakeryProductionProductsItem[] $bakery_production_products_items
 * @property Collection|Bakeryproduction[] $bakeryproductions
 * @property Collection|CreditPaymentLog[] $credit_payment_logs
 * @property Collection|CustomerDepositsHistory[] $customer_deposits_histories
 * @property Collection|InvoiceItemBatch[] $invoice_item_batches
 * @property Collection|InvoiceItem[] $invoice_items
 * @property Collection|Invoice[] $invoices
 * @property Collection|Payment[] $payments
 * @property Collection|PurchaseOrderItem[] $purchase_order_items
 * @property Collection|PurchaseOrder[] $purchase_orders
 * @property Collection|User[] $users
 *
 * @package App\Models
 */
class Branch extends Model
{
    public static array $fields = [
        "name",
        "address_1",
        "address_2",
        "phone"
    ];

    protected $table = 'branches';

    protected $fillable = [
        'name',
        'address_1',
        'address_2',
        'phone',
        'quantity_column'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function($obj){
            $value = generateRandom(5);
            Schema::table("rawmaterialbatch", function (Blueprint $table) use(& $value) {
                $table->decimal($value)->default(0)->after("quantity");
            });

            Schema::table("rawmaterials", function (Blueprint $table) use(& $value) {
                $table->decimal($value)->default(0)->after("quantity");
            });

            Schema::table("stockbatches", function (Blueprint $table) use(& $value) {
                $table->decimal($value)->default(0)->after("quantity");
            });

            Schema::table("stocks", function (Blueprint $table) use(& $value) {
                $table->decimal($value)->default(0)->after("quantity");
            });

            $obj->quantity_column = $value;
        });


        self::deleting(function($obj){
            Schema::table('rawmaterialbatch', function (Blueprint $table) use(&$obj) {
                $table->dropColumn($obj->quantity_column);
            });
            Schema::table('stockbatches', function (Blueprint $table) use(&$obj) {
                $table->dropColumn($obj->quantity_column);
            });
            Schema::table('rawmaterials', function (Blueprint $table) use(&$obj) {
                $table->dropColumn($obj->quantity_column);
            });
            Schema::table('stocks', function (Blueprint $table) use(&$obj) {
                $table->dropColumn($obj->quantity_column);
            });
        });
    }

	public function bakery_production_material_items()
	{
		return $this->hasMany(BakeryProductionMaterialItem::class);
	}

	public function bakery_production_products_items()
	{
		return $this->hasMany(BakeryProductionProductsItem::class);
	}

	public function bakeryproductions()
	{
		return $this->hasMany(Bakeryproduction::class);
	}

	public function credit_payment_logs()
	{
		return $this->hasMany(CreditPaymentLog::class);
	}


	public function invoice_item_batches()
	{
		return $this->hasMany(InvoiceItemBatch::class);
	}

	public function invoice_items()
	{
		return $this->hasMany(InvoiceItem::class);
	}

	public function invoices()
	{
		return $this->hasMany(Invoice::class);
	}

	public function payments()
	{
		return $this->hasMany(Payment::class);
	}

	public function purchase_order_items()
	{
		return $this->hasMany(PurchaseOrderItem::class);
	}

	public function purchase_orders()
	{
		return $this->hasMany(PurchaseOrder::class);
	}

	public function users()
	{
		return $this->belongsToMany(User::class, 'userbranchesmapper')
					->withPivot('id')
					->withTimestamps();
	}
}
