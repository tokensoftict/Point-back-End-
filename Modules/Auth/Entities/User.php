<?php

namespace Modules\Auth\Entities;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Modules\Settings\Entities\Branch;
use Modules\Settings\Entities\Userbranchesmapper;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    protected $appends  = ['user_token','branches'];


    protected static function newFactory()
    {
        return \Modules\Auth\Database\Factories\UserFactory::new();
    }


    public function getBranchesAttribute()
    {
        $branches = [];
        foreach (Userbranchesmapper::with(['branch'])->where("user_id",$this->id)->get() as $branch)
        {
            $branches[] = ['name'=>$branch->branch->name,'id'=>$branch->branch->id];
        }

        if (count($branches) === 0)
        {
            $b = Branch::find(1);
            return [
                [
                    'name' => $b->name,
                    'id' => $b->id
                ]
            ];
        }

        return $branches;
    }

    public function getUserTokenAttribute()
    {
        if(!$this->currentAccessToken()) return $this->createToken("bakery")->plainTextToken;

        return $this->currentAccessToken();
    }

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name','username','usergroup_id','username','email','phone','password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    public function usergroup()
    {
        return $this->belongsTo(Usergroup::class);
    }

    public function user_branches()
    {
        return $this->belongsToMany(Branch::class,'userbranchesmapper')->withTimestamps();
    }


    public function updateUserBranches()
    {
        $ids = [];
        $all = request()->all();
        $_branch = $all['branch_id'];
        $branches = json_decode($_branch,true);

        foreach($branches as $branch)
        {
            $ids[] = $branch['id'];
        }

        $this->user_branches()->sync($ids);
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::created(function($obj){
            $obj->updateUserBranches();
        });

    }


}
